{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e215001",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data loaded successfully.\n",
      "Data contains 50 cases after cleaning.\n",
      "\n",
      "\n",
      "Training models...\n",
      "Training complete.\n",
      "\n",
      "--- Model Evaluation ---\n",
      "Evaluating on 10 test cases\n",
      "\n",
      "Random Forest Performance:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      游댮 High       0.00      0.00      0.00         3\n",
      "    游리 Medium       0.00      0.00      0.00         3\n",
      "       游릭 Low       0.33      0.75      0.46         4\n",
      "\n",
      "    accuracy                           0.30        10\n",
      "   macro avg       0.11      0.25      0.15        10\n",
      "weighted avg       0.13      0.30      0.18        10\n",
      "\n",
      "Accuracy: 0.30\n",
      "\n",
      "Logistic Regression Performance:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "      游댮 High       0.00      0.00      0.00         3\n",
      "    游리 Medium       0.50      0.67      0.57         3\n",
      "       游릭 Low       0.40      0.50      0.44         4\n",
      "\n",
      "    accuracy                           0.40        10\n",
      "   macro avg       0.30      0.39      0.34        10\n",
      "weighted avg       0.31      0.40      0.35        10\n",
      "\n",
      "Accuracy: 0.40\n",
      "\n",
      "Feature: Court_Name\n",
      "Options:\n",
      "1. Supreme Court\n",
      "2. High Court\n",
      "3. District Court\n",
      "Enter choice number (1-3), 's' to skip, or type custom value: 1\n",
      "\n",
      "Feature: Case_Type\n",
      "Options:\n",
      "1. Family\n",
      "2. Civil\n",
      "3. Criminal\n",
      "4. PIL\n",
      "Enter choice number (1-4), 's' to skip, or type custom value: 2\n",
      "\n",
      "Feature: Urgency_Tag\n",
      "Options:\n",
      "1. Emergency\n",
      "2. Regular\n",
      "3. High-profile\n",
      "Enter choice number (1-3), 's' to skip, or type custom value: 3\n",
      "\n",
      "Feature: Advocate_Names\n",
      "Options:\n",
      "1. A. Singh, R. Mehta\n",
      "2. L. Verma, L. Verma\n",
      "3. L. Verma, R. Mehta\n",
      "4. R. Mehta, A. Singh\n",
      "5. R. Mehta, R. Mehta\n",
      "6. K. Sharma, L. Verma\n",
      "7. K. Sharma, R. Mehta\n",
      "8. L. Verma, A. Singh\n",
      "9. K. Sharma, K. Sharma\n",
      "10. L. Verma, K. Sharma\n",
      "11. R. Mehta, K. Sharma\n",
      "12. A. Singh, L. Verma\n",
      "13. A. Singh, A. Singh\n",
      "14. A. Singh, K. Sharma\n",
      "15. R. Mehta, L. Verma\n",
      "Enter choice number (1-15), 's' to skip, or type custom value: 4\n",
      "\n",
      "Feature: Legal_Sections\n",
      "Options:\n",
      "1. Article 32\n",
      "2. CRPC 125\n",
      "3. IPC 302\n",
      "4. Family Act 1955\n",
      "5. IPC 420, 467\n",
      "Enter choice number (1-5), 's' to skip, or type custom value: 5\n",
      "\n",
      "Feature: Past_History\n",
      "Options:\n",
      "1. No\n",
      "2. Yes\n",
      "Enter choice number (1-2), 's' to skip, or type custom value: 2\n",
      "\n",
      "Feature: Estimated_Impact\n",
      "Options:\n",
      "1. Medium\n",
      "2. High\n",
      "3. Low\n",
      "Enter choice number (1-3), 's' to skip, or type custom value: 2\n",
      "\n",
      "Feature: Media_Coverage\n",
      "Options:\n",
      "1. No\n",
      "2. Yes\n",
      "Enter choice number (1-2), 's' to skip, or type custom value: 1\n",
      "\n",
      "--- Prediction Results ---\n",
      "\n",
      "Random Forest Prediction: 游리 Medium\n",
      "Random Forest Prediction Probabilities:\n",
      "  游리 Medium: 44.0%\n",
      "  游릭 Low: 42.0%\n",
      "  游댮 High: 14.0%\n",
      "\n",
      "Logistic Regression Prediction: 游리 Medium\n",
      "Logistic Regression Prediction Probabilities:\n",
      "  游리 Medium: 87.5%\n",
      "  游릭 Low: 9.5%\n",
      "  游댮 High: 2.9%\n",
      "\n",
      "Averaged Prediction Probabilities:\n",
      "  游리 Medium: 65.8%\n",
      "  游릭 Low: 25.8%\n",
      "  游댮 High: 8.4%\n",
      "\n",
      "Final Prediction (Averaged): 游리 Medium\n",
      "\n",
      "Make another prediction? (y/n): y\n",
      "\n",
      "Feature: Court_Name\n",
      "Options:\n",
      "1. Supreme Court\n",
      "2. High Court\n",
      "3. District Court\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "import warnings\n",
    "import sys\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# --- 1. Load Data and Define Features ---\n",
    "try:\n",
    "    import openpyxl\n",
    "\n",
    "    df = pd.read_excel(r\"C:\\Users\\dell\\Downloads\\Indian_Court_Cases_Dataset_Updated.xlsx\") # Replace with your file path\n",
    "    print(\"Data loaded successfully.\")\n",
    "\n",
    "    df['Priority_Label'] = df['Priority_Label'].astype(str).str.strip()\n",
    "    df.dropna(subset=['Priority_Label'], inplace=True)\n",
    "    print(f\"Data contains {len(df)} cases after cleaning.\\n\")\n",
    "\n",
    "except (FileNotFoundError, ImportError) as e:\n",
    "    print(f\"Error: {e}\")\n",
    "    sys.exit(1)\n",
    "except Exception as e:\n",
    "    print(f\"An error occurred while loading or cleaning the file: {e}\")\n",
    "    sys.exit(1)\n",
    "\n",
    "FEATURE_DEFINITIONS = {\n",
    "    'Court_Name': {'type': 'categorical'},\n",
    "    'Case_Type': {'type': 'categorical'},\n",
    "    'Urgency_Tag': {'type': 'categorical'},\n",
    "    'Advocate_Names': {'type': 'categorical'},\n",
    "    'Legal_Sections': {'type': 'categorical'},\n",
    "    'Past_History': {'type': 'categorical'},\n",
    "    'Estimated_Impact': {'type': 'categorical'},\n",
    "    'Media_Coverage': {'type': 'categorical'},\n",
    "}\n",
    "\n",
    "TARGET_COLUMN = 'Priority_Label'\n",
    "\n",
    "# --- Helper Functions ---\n",
    "def get_feature_lists(definitions, df):\n",
    "    categorical_features = [name for name, details in definitions.items()\n",
    "                            if details['type'] == 'categorical' and name in df.columns]\n",
    "    return categorical_features\n",
    "\n",
    "def create_preprocessor(categorical_features):\n",
    "    categorical_transformer = Pipeline(steps=[\n",
    "        ('imputer', SimpleImputer(strategy='most_frequent')),\n",
    "        ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n",
    "    ])\n",
    "\n",
    "    preprocessor = ColumnTransformer(\n",
    "        transformers=[('cat', categorical_transformer, categorical_features)],\n",
    "        remainder='drop'\n",
    "    )\n",
    "    return preprocessor\n",
    "\n",
    "def train_models(X_train, y_train, preprocessor):\n",
    "    rf_model = Pipeline([\n",
    "        ('preprocessor', preprocessor),\n",
    "        ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n",
    "    ])\n",
    "    lr_model = Pipeline([\n",
    "        ('preprocessor', preprocessor),\n",
    "        ('classifier', LogisticRegression(random_state=42, max_iter=1000, class_weight='balanced'))\n",
    "    ])\n",
    "\n",
    "    print(\"\\nTraining models...\")\n",
    "    rf_model.fit(X_train, y_train)\n",
    "    lr_model.fit(X_train, y_train)\n",
    "    print(\"Training complete.\")\n",
    "    return rf_model, lr_model\n",
    "\n",
    "def get_user_input(definitions, df):\n",
    "    user_data = {}\n",
    "    for feature, details in definitions.items():\n",
    "        if feature not in df.columns:\n",
    "            user_data[feature] = input(f\"Enter value for {feature}: \")\n",
    "            continue\n",
    "        options = df[feature].dropna().unique()\n",
    "        if options.size > 0:\n",
    "            print(f\"\\nFeature: {feature}\\nOptions:\")\n",
    "            for i, opt in enumerate(options[:20]):\n",
    "                print(f\"{i+1}. {opt[:50]}\")\n",
    "            if len(options) > 20: print(\"...\")\n",
    "            while True:\n",
    "                choice = input(f\"Enter choice number (1-{len(options)}), 's' to skip, or type custom value: \").strip()\n",
    "                if choice.lower() == 's':\n",
    "                    user_data[feature] = np.nan; break\n",
    "                try:\n",
    "                    choice_index = int(choice) -1\n",
    "                    if 0 <= choice_index < len(options):\n",
    "                        user_data[feature] = options[choice_index]; break\n",
    "                    print(f\"Invalid choice. Enter 1-{len(options)}.\")\n",
    "                except ValueError: print(\"Invalid input. Try again.\")\n",
    "        else: user_data[feature] = input(f\"Enter value for {feature}: \")\n",
    "    return pd.DataFrame([user_data])\n",
    "\n",
    "\n",
    "def predict_priority(input_df, rf_model, lr_model):\n",
    "    try:\n",
    "        print(\"\\n--- Prediction Results ---\")\n",
    "        \n",
    "        rf_prediction = rf_model.predict(input_df)[0]\n",
    "        rf_proba = rf_model.predict_proba(input_df)[0]\n",
    "        rf_proba_dict = {class_label: f\"{prob:.1%}\" for class_label, prob in zip(rf_model.classes_, rf_proba)}\n",
    "        \n",
    "        lr_prediction = lr_model.predict(input_df)[0]\n",
    "        lr_proba = lr_model.predict_proba(input_df)[0]\n",
    "        lr_proba_dict = {class_label: f\"{prob:.1%}\" for class_label, prob in zip(lr_model.classes_, lr_proba)}\n",
    "\n",
    "        averaged_probabilities = {}\n",
    "        for label in rf_model.classes_:\n",
    "            rf_prob = rf_proba_dict.get(label, 0.0)\n",
    "            lr_prob = lr_proba_dict.get(label, 0.0)\n",
    "            try:\n",
    "                averaged_prob = (float(rf_prob.strip('%')) + float(lr_prob.strip('%')))/2\n",
    "                averaged_probabilities[label] = f\"{averaged_prob:.1f}%\"\n",
    "            except (ValueError, TypeError):\n",
    "                averaged_probabilities[label] = \"N/A\"\n",
    "\n",
    "\n",
    "        print(f\"\\nRandom Forest Prediction: {rf_prediction}\")\n",
    "        print(\"Random Forest Prediction Probabilities:\")\n",
    "        for label, prob in sorted(rf_proba_dict.items(), key=lambda x: float(x[1].rstrip('%')), reverse=True):\n",
    "            print(f\"  {label}: {prob}\")\n",
    "        \n",
    "        print(f\"\\nLogistic Regression Prediction: {lr_prediction}\")\n",
    "        print(\"Logistic Regression Prediction Probabilities:\")\n",
    "        for label, prob in sorted(lr_proba_dict.items(), key=lambda x: float(x[1].rstrip('%')), reverse=True):\n",
    "            print(f\"  {label}: {prob}\")\n",
    "\n",
    "        print(f\"\\nAveraged Prediction Probabilities:\")\n",
    "        for label, prob in sorted(averaged_probabilities.items(), key=lambda x: float(x[1].rstrip('%')) if x[1] != \"N/A\" else -1, reverse=True):\n",
    "            print(f\"  {label}: {prob}\")\n",
    "\n",
    "        final_prediction = max(averaged_probabilities, key=lambda k: float(averaged_probabilities[k].strip('%')) if averaged_probabilities[k] != \"N/A\" else -1)\n",
    "        print(f\"\\nFinal Prediction (Averaged): {final_prediction}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"\\nError during prediction: {str(e)}\")\n",
    "        print(\"Please check your input values and try again.\")\n",
    "\n",
    "\n",
    "# --- 2. Preprocessing and Model Training ---\n",
    "X = df[list(FEATURE_DEFINITIONS.keys())]\n",
    "y = df[TARGET_COLUMN]\n",
    "\n",
    "categorical_features = get_feature_lists(FEATURE_DEFINITIONS, df)\n",
    "preprocessor = create_preprocessor(categorical_features)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "rf_model, lr_model = train_models(X_train, y_train, preprocessor)\n",
    "\n",
    "# --- Evaluation and Prediction ---\n",
    "print(\"\\n--- Model Evaluation ---\")\n",
    "print(f\"Evaluating on {len(X_test)} test cases\")\n",
    "\n",
    "print(\"\\nRandom Forest Performance:\")\n",
    "y_pred_rf = rf_model.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_rf))\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred_rf):.2f}\")\n",
    "\n",
    "print(\"\\nLogistic Regression Performance:\")\n",
    "y_pred_lr = lr_model.predict(X_test)\n",
    "print(classification_report(y_test, y_pred_lr))\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred_lr):.2f}\")\n",
    "\n",
    "# --- 3. Get User Input and Predict ---\n",
    "while True:\n",
    "    try:\n",
    "        user_input_df = get_user_input(FEATURE_DEFINITIONS, df)\n",
    "        predict_priority(user_input_df, rf_model, lr_model)\n",
    "        \n",
    "        another = input(\"\\nMake another prediction? (y/n): \").strip().lower()\n",
    "        if another != 'y':\n",
    "            break\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"Error: {str(e)}\")\n",
    "        print(\"Please try again with different inputs.\")\n",
    "\n",
    "print(\"\\nScript finished successfully.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "740d841b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
